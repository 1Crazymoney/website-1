<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[IPFS Blog]]></title><description><![CDATA[IPFS Blog]]></description><link>http://ipfs.io/blog/</link><generator>metalsmith-feed</generator><lastBuildDate>Sat, 12 Dec 2015 10:24:29 GMT</lastBuildDate><atom:link href="http://ipfs.io/blog/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[The IPFS Team]]></author><item><title><![CDATA[Hello Worlds]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">0-hello-worlds</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="hello-worlds"><a class="heading-anchor" href="#hello-worlds"><span></span></a>Hello Worlds</h1>
    <p>by Juan Benet on 2015-05-04</p>

    <pre><code class="lang-sh">&gt; echo &quot;hello worlds&quot; | ipfs add
added QmZ4tDuvesekSs4qM5ZBKpXiZGun7S2CYtEZRB3DYXkjGx
&gt; ipfs cat QmZ4tDuvesekSs4qM5ZBKpXiZGun7S2CYtEZRB3DYXkjGx
hello worlds
</code></pre>
<p>Greetings Internet!</p>
<p>This post kicks off the official IPFS (InterPlanetary File System) Blog. This is long overdue-- the project is many months old. We will be making a series of posts explaining various aspects of IPFS, its development, our growing community, and so on. This blog will also be used to make all important announcements henceforth.</p>
<!--more-->
<p>You can&apos;t <em>yet</em> &quot;follow&quot; the blog with ipfs, but we&apos;re working on it and expect to have it working soon. For now, you can follow one of these ways:</p>
<ul>
<li>HTTP: <a href="http://ipfs.io/blog">http://ipfs.io/blog</a></li>
<li>Git: <code>git clone https://github.com/ipfs/blog</code></li>
<li>GitHub: click watch at <a href="https://github.com/ipfs/blog">https://github.com/ipfs/blog</a></li>
<li>RSS: <a href="../rss.xml">follow RSS Feed</a></li>
<li>IPFS: <a href="https://github.com/ipfs/blog/issues/2">coming soon</a></li>
</ul>
<p>Don&apos;t miss any InterPlanetary updates!</p>
<p><img src="earthrise.png" alt=""></p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/0-hello-worlds</link><guid isPermaLink="true">http://ipfs.io/blog/0-hello-worlds</guid><dc:creator><![CDATA[Juan Benet]]></dc:creator><pubDate>Tue, 05 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Run IPFS in a Docker container]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">1-run-ipfs-on-docker</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="run-ipfs-in-a-docker-container"><a class="heading-anchor" href="#run-ipfs-in-a-docker-container"><span></span></a>Run IPFS in a Docker container</h1>
    <p>by Kyle Drake on 2015-07-10</p>

    <p>In recent years, Docker and a few other projects have redefined how we run server applications. In the future, we might be running containerized apps in our personal devices. At its core, this fast-paced improvement is a combination of good interfaces to standardize how to do things, and great tooling to make using containers easy.</p>
<p>The IPFS Project has many things planned for the world of containers. The most interesting is using IPFS to distribute containers hyper efficiently across data-centers and the internet. We will be discussing many of these things in upcoming posts, but first things first. This post is a quick guide for running an IPFS node directly within Docker.</p>
<p>The IPFS team has provided an <a href="https://registry.hub.docker.com/u/jbenet/go-ipfs/">IPFS Docker image</a>, which is syncronized with the latest commits to <a href="https://github.com/ipfs/go-ipfs">go-ipfs</a>. It only takes a few commands to try it out!</p>
<pre><code class="lang-sh">&gt; mkdir /tmp/ipfs-docker-staging
&gt; mkdir /tmp/ipfs-docker-data
&gt; docker run -d --name ipfs-node \
  -v /tmp/ipfs-docker-staging:/export -v /tmp/ipfs-docker-data:/data/ipfs \
  -p 8080:8080 -p 4001:4001 -p 127.0.0.1:5001:5001 \
  jbenet/go-ipfs:latest
faa8f714398c7a1a5a29adc2aed01857b41444ed53ec11863a3136ad37c8064c
</code></pre>
<p>Port <code>8080</code> is the HTTP Gateway, which allows you to query ipfs data with your browser (<a href="http://gateway.ipfs.io/ipfs/QmVyS3iAy7mvDA2HqQWm2aqZDcGDH3bCRLFkEutfBWNBqN/">see this example</a>), port <code>4001</code> is what swarm port IPFS uses to communicate with other nodes, and port <code>5001</code> is used for the local API. We bind <code>5001</code> only on <code>127.0.0.1</code> because it should not be exposed to the outside world. The <code>faa8f7143...</code> is the docker container id.</p>
<p>We&apos;ve mounted a data and staging volume. The <code>data</code> volume is used to store the IPFS local repo (config and database), and <code>staging</code> is a directory you can use for staging files for command line usage (such as <code>ipfs add</code>). If you&apos;re only using the API, you can omit the staging directory volume. And of course, feel free to put those directories somewhere other than <code>/tmp</code>.</p>
<p>Now what? Your node is running. You can issue commands directly to the containerized ipfs with <code>docker exec &lt;container-id&gt; &lt;ipfs-cmd&gt;</code>. For example, you can try <code>ipfs swarm peers</code> to see who you are connected to:</p>
<pre><code class="lang-sh"># let&apos;s set $cid = &lt;container-id&gt; for easy access
&gt; cid=faa8f714398c7a1a5a29adc2aed01857b41444ed53ec11863a3136ad37c8064c
&gt; ipfs exec $cid ipfs swarm peers
/ip4/104.236.179.241/tcp/4001/ipfs/QmSoLpPVmHKQ4XTPdz8tjDFgdeRFkpV8JgYq8JVJ69RrZm
/ip4/128.199.219.111/tcp/4001/ipfs/QmSoLSafTMBsPKadTEgaXctDQVcqN88CNLHXMkTNwMKPnu
/ip4/162.243.248.213/tcp/4001/ipfs/QmSoLueR4xBeUbY9WZ9xGUUxunbKWcrNFTDAadQJmocnWm
/ip4/178.62.61.185/tcp/4001/ipfs/QmSoLMeWqB7YGVLJN3pNLQpmmEk35v6wYtsMGLzSr5QBU3
</code></pre>
<p>And of course, you can <code>add</code> or <code>cat</code> content as usual:</p>
<pre><code class="lang-sh">&gt; echo &quot;hello from dockerized ipfs&quot; &gt;/tmp/ipfs-docker-staging/hello
&gt; docker exec $cid ipfs add /export/hello
added QmcDge1SrsTBU8b9PBGTGYguNRnm84Kvg8axfGURxqZpR1 /export/hello
&gt; docker exec $cid ipfs cat /ipfs/QmSvCqazpuuib8qyRyddyFemLc2qmRukLLy8YfkdRPEXoQ
hello there!
</code></pre>
<p>Your dockerized IPFS is now also running a Gateway at <code>http://&lt;ip-address-of-the-computer&gt;:8080</code>. You can try it out with <code>curl</code>, or with your browser:</p>
<pre><code class="lang-sh">&gt; curl http://localhost:8080/ipfs/QmcDge1SrsTBU8b9PBGTGYguNRnm84Kvg8axfGURxqZpR1
hello from dockerized ipfs
</code></pre>
<p><a href="http://kuberneteslaunch.com">Kubernetes 1.0</a> comes out next week, so after that, we&apos;ll try using it to build a cluster of IPFS nodes that can store any kind of data and be able to retreive it from any other IPFS node. Not just with IPFS nodes in your cluster, but with everyone!</p>
<p><iframe src="./ascii" style="width: 737px; height: 509px; overflow: hidden;" scrolling="no"></iframe></p>
<p class="powered">asciicast powered by <a href="https://asciinema.org/" target="_top">asciinema</a></p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/1-run-ipfs-on-docker</link><guid isPermaLink="true">http://ipfs.io/blog/1-run-ipfs-on-docker</guid><dc:creator><![CDATA[Kyle Drake]]></dc:creator><pubDate>Sat, 11 Jul 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ipscend - Publish static web content to IPFS]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">3-ipscend</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="ipscend---publish-static-web-content-to-ipfs"><a class="heading-anchor" href="#ipscend---publish-static-web-content-to-ipfs"><span></span></a>ipscend - Publish static web content to IPFS</h1>
    <p>by David Dias on 2015-11-26</p>

    <p><a href="https://github.com/diasdavid/ipscend"><img src="!img/ipscend.png" alt=""></a></p>
<p><a href="https://github.com/diasdavid/ipscend"><code>ipscend</code></a> is a new tool to help developers publish their static web content to IPFS and share it easily, while keeping history and more. It is heavily inspired by previous static web content publishing tools, like GitHub Pages and surge.</p>
<h2 id="features"><a class="heading-anchor" href="#features"><span></span></a>Features</h2>
<p>Currently, <code>ipscend</code> offers a set of features, accessible through a CLI, and installable through npm (<code>npm i -g ipscend</code>), which enable a simple workflow for working in your Web page/app and publishing it to the IPFS network.</p>
<ul>
<li><code>ipscend browse</code> - Opens the last published version of your application in the browser.</li>
<li><code>ipscend init</code> - Initializes your project. Asks for the folder where the web application will be available and stores an <code>ipscend.json</code> object in your current path to store all the metadata it generates, such as published versions and taken screenshots.</li>
<li><code>ipscend preview</code> - Serves your application on a local static file server, so that you can try it out before you feel ready to publish it.</li>
<li><code>ipscend publish</code> - Publishes the current state of your application to IPFS and stores a reference to it.</li>
<li><code>ipscend versions</code> - Prints out the published versions for the app and its respective timestamp.</li>
<li><code>ipscend screenshot</code> - Opens a screenshot preview of all the published versions of your app. In order to generate the screenshots, you must first run <code>ipscend screenshot --gen</code>.
  <img src="img/ipscend-screenshot.gif" alt=""></li>
</ul>
<p>An <code>ipscend.json</code> object for a project with some published versions will look like:</p>
<pre><code class="lang-bash">$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmQhNMwk7fThpwRNUR3bStb1eA7aeFJaApZjDaQCnykowL&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:50:10.998Z&quot;,
      &quot;snapshot&quot;: &quot;QmNMqiKZG7gCsnaQFTqG3AUeVhA1n8byy974Yqn3qRGZcJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmSAmgQPCWjbrpbYHZQ2rVkH7a9vavubG1Jzv5CjDWrUmt&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:00.860Z&quot;,
      &quot;snapshot&quot;: &quot;QmcCNrn72FuHWkXtpJuUYfbH87d61qa6PSagUbLiK6VfLJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:24.379Z&quot;,
      &quot;snapshot&quot;: &quot;QmP5NuGdozeWaZqEdY1zBpcupB6qQ66AWReqm4L2vJzt73&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<h2 id="workflow"><a class="heading-anchor" href="#workflow"><span></span></a>Workflow</h2>
<p>In order to get started, all you need to do is initiate your ipscend in your web page/app project:</p>
<pre><code class="lang-bash">$ ipscend init
This utility will walk you through creating a ipscend.json file.
Path of your Web Application (project)? (public) src/public
$ cat ipscend.json
{
  &quot;versions&quot;: [],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<p>Once you are ready to publish, run the <code>ipscend publish</code> command:</p>
<pre><code class="lang-bash">$ ipscend publish
{ hash: &apos;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&apos;,
  timestamp: Fri Nov 27 2015 10:23:37 GMT+0000 (WET) }
published src/public QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh
$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-27T16:23:37.971Z&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
</code></pre>
<p>Grab that hash and share it with your friends, by sending them a link to ipfs.io, appending &quot;/ipfs/Hash&quot; (e.g.  https:/ipfs.io/ipfs/ QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh).</p>
<p>If you want to use your awesome.domain.com to load your page from IPFS, you can check how to do it now at <a href="https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick">https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick</a>.</p>
<h2 id="awesome-future-"><a class="heading-anchor" href="#awesome-future-"><span></span></a>Awesome (FUTURE)!</h2>
<p><code>ipscend</code> is still in its humble beginnings. Some of the ideas and plans to build in the future include being able to:</p>
<ul>
<li>Extract the version from the VCS itself (<a href="https://github.com/ipfs/notes/issues/23">https://github.com/ipfs/notes/issues/23</a>), so that every commit can be a different working version, allowing you to test every commit in your CI.</li>
<li>Roll back history, following the &apos;time machine&apos; analogy.</li>
<li>Update your DNS provider automatically, avoiding having to use an external tool like <a href="https://github.com/ipfs/dnslink-deploy"><code>dnslink-deploy</code></a>.</li>
<li>Enable reviewers to write notes.</li>
<li>Take screenshots in every browser version, so that we can use the timeline to see if there was any regression at a point in time, which might happen in a specific browser.</li>
<li>moaaaar :D If you have ideas or want to contribute, ipscend is fully MIT Licensed, so feel free to open a issue or PR on <a href="https://github.com/diasdavid/ipscend">https://github.com/diasdavid/ipscend</a>.</li>
</ul>
<p>A big thank you to <a href="https://github.com/andresgutgon">Andr&#xE9;s Gutgon</a> who made the screenshot preview look <a href="https://github.com/diasdavid/ipscend-screenshot-visualizer/pull/1">really good</a></p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/3-ipscend</link><guid isPermaLink="true">http://ipfs.io/blog/3-ipscend</guid><dc:creator><![CDATA[David Dias]]></dc:creator><pubDate>Fri, 27 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ipscend - Publish static web content to IPFS]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">3-ipscend</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="ipscend---publish-static-web-content-to-ipfs"><a class="heading-anchor" href="#ipscend---publish-static-web-content-to-ipfs"><span></span></a>ipscend - Publish static web content to IPFS</h1>
    <p>by David Dias on 2015-11-26</p>

    <p><a href="https://github.com/diasdavid/ipscend"><img src="!img/ipscend.png" alt=""></a></p>
<p><a href="https://github.com/diasdavid/ipscend"><code>ipscend</code></a> is a new tool to help developers publish their static web content to IPFS and share it easily, while keeping history and more. It is heavily inspired by previous static web content publishing tools, like GitHub Pages and surge.</p>
<h2 id="features"><a class="heading-anchor" href="#features"><span></span></a>Features</h2>
<p>Currently, <code>ipscend</code> offers a set of features, accessible through a CLI, and installable through npm (<code>npm i -g ipscend</code>), which enable a simple workflow for working in your Web page/app and publishing it to the IPFS network.</p>
<ul>
<li><code>ipscend browse</code> - Opens the last published version of your application in the browser.</li>
<li><code>ipscend init</code> - Initializes your project. Asks for the folder where the web application will be available and stores an <code>ipscend.json</code> object in your current path to store all the metadata it generates, such as published versions and taken screenshots.</li>
<li><code>ipscend preview</code> - Serves your application on a local static file server, so that you can try it out before you feel ready to publish it.</li>
<li><code>ipscend publish</code> - Publishes the current state of your application to IPFS and stores a reference to it.</li>
<li><code>ipscend versions</code> - Prints out the published versions for the app and its respective timestamp.</li>
<li><p><code>ipscend screenshot</code> - Opens a screenshot preview of all the published versions of your app. In order to generate the screenshots, you must first run <code>ipscend screenshot --gen</code>.</p>
<p>  <img src="img/ipscend-screenshot.gif" alt=""></p>
</li>
</ul>
<p>An <code>ipscend.json</code> object for a project with some published versions will look like:</p>
<pre><code class="lang-bash">$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmQhNMwk7fThpwRNUR3bStb1eA7aeFJaApZjDaQCnykowL&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:50:10.998Z&quot;,
      &quot;snapshot&quot;: &quot;QmNMqiKZG7gCsnaQFTqG3AUeVhA1n8byy974Yqn3qRGZcJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmSAmgQPCWjbrpbYHZQ2rVkH7a9vavubG1Jzv5CjDWrUmt&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:00.860Z&quot;,
      &quot;snapshot&quot;: &quot;QmcCNrn72FuHWkXtpJuUYfbH87d61qa6PSagUbLiK6VfLJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:24.379Z&quot;,
      &quot;snapshot&quot;: &quot;QmP5NuGdozeWaZqEdY1zBpcupB6qQ66AWReqm4L2vJzt73&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<h2 id="workflow"><a class="heading-anchor" href="#workflow"><span></span></a>Workflow</h2>
<p>In order to get started, all you need to do is initiate your ipscend in your web page/app project:</p>
<pre><code class="lang-bash">$ ipscend init
This utility will walk you through creating a ipscend.json file.
Path of your Web Application (project)? (public) src/public
$ cat ipscend.json
{
  &quot;versions&quot;: [],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<p>Once you are ready to publish, run the <code>ipscend publish</code> command:</p>
<pre><code class="lang-bash">$ ipscend publish
{ hash: &apos;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&apos;,
  timestamp: Fri Nov 27 2015 10:23:37 GMT+0000 (WET) }
published src/public QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh
$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-27T16:23:37.971Z&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
</code></pre>
<p>Grab that hash and share it with your friends, by sending them a link to ipfs.io, appending &quot;/ipfs/Hash&quot; (e.g.  https:/ipfs.io/ipfs/ QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh).</p>
<p>If you want to use your awesome.domain.com to load your page from IPFS, you can check how to do it now at <a href="https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick">https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick</a>.</p>
<h2 id="awesome-future-"><a class="heading-anchor" href="#awesome-future-"><span></span></a>Awesome (FUTURE)!</h2>
<p><code>ipscend</code> is still in its humble beginnings. Some of the ideas and plans to build in the future include being able to:</p>
<ul>
<li>Extract the version from the VCS itself (<a href="https://github.com/ipfs/notes/issues/23">https://github.com/ipfs/notes/issues/23</a>), so that every commit can be a different working version, allowing you to test every commit in your CI.</li>
<li>Roll back history, following the &apos;time machine&apos; analogy.</li>
<li>Update your DNS provider automatically, avoiding having to use an external tool like <a href="https://github.com/ipfs/dnslink-deploy"><code>dnslink-deploy</code></a>.</li>
<li>Enable reviewers to write notes.</li>
<li>Take screenshots in every browser version, so that we can use the timeline to see if there was any regression at a point in time, which might happen in a specific browser.</li>
<li>moaaaar :D If you have ideas or want to contribute, ipscend is fully MIT Licensed, so feel free to open a issue or PR on <a href="https://github.com/diasdavid/ipscend">https://github.com/diasdavid/ipscend</a>.</li>
</ul>
<p>A big thank you to <a href="https://github.com/andresgutgon">Andr&#xE9;s Gutgon</a> who made the screenshot preview look <a href="https://github.com/diasdavid/ipscend-screenshot-visualizer/pull/1">really good</a></p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/3-ipscend</link><guid isPermaLink="true">http://ipfs.io/blog/3-ipscend</guid><dc:creator><![CDATA[David Dias]]></dc:creator><pubDate>Fri, 27 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ipscend - Publish static web content to IPFS]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">3-ipscend</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="ipscend---publish-static-web-content-to-ipfs"><a class="heading-anchor" href="#ipscend---publish-static-web-content-to-ipfs"><span></span></a>ipscend - Publish static web content to IPFS</h1>
    <p>by David Dias on 2015-11-26</p>

    <p><a href="https://github.com/diasdavid/ipscend"><img src="!img/ipscend.png" alt=""></a></p>
<p><a href="https://github.com/diasdavid/ipscend"><code>ipscend</code></a> is a new tool to help developers publish their static web content to IPFS and share it easily, while keeping history and more. It is heavily inspired by previous static web content publishing tools, like GitHub Pages and surge.</p>
<h2 id="features"><a class="heading-anchor" href="#features"><span></span></a>Features</h2>
<p>Currently, <code>ipscend</code> offers a set of features, accessible through a CLI, and installable through npm (<code>npm i -g ipscend</code>), which enable a simple workflow for working in your Web page/app and publishing it to the IPFS network.</p>
<ul>
<li><code>ipscend browse</code> - Opens the last published version of your application in the browser.</li>
<li><code>ipscend init</code> - Initializes your project. Asks for the folder where the web application will be available and stores an <code>ipscend.json</code> object in your current path to store all the metadata it generates, such as published versions and taken screenshots.</li>
<li><code>ipscend preview</code> - Serves your application on a local static file server, so that you can try it out before you feel ready to publish it.</li>
<li><code>ipscend publish</code> - Publishes the current state of your application to IPFS and stores a reference to it.</li>
<li><code>ipscend versions</code> - Prints out the published versions for the app and its respective timestamp.</li>
<li><code>ipscend screenshot</code> - Opens a screenshot preview of all the published versions of your app. In order to generate the screenshots, you must first run <code>ipscend screenshot --gen</code>.
<img src="img/ipscend-screenshot.gif" alt=""></li>
</ul>
<p>An <code>ipscend.json</code> object for a project with some published versions will look like:</p>
<pre><code class="lang-bash">$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmQhNMwk7fThpwRNUR3bStb1eA7aeFJaApZjDaQCnykowL&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:50:10.998Z&quot;,
      &quot;snapshot&quot;: &quot;QmNMqiKZG7gCsnaQFTqG3AUeVhA1n8byy974Yqn3qRGZcJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmSAmgQPCWjbrpbYHZQ2rVkH7a9vavubG1Jzv5CjDWrUmt&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:00.860Z&quot;,
      &quot;snapshot&quot;: &quot;QmcCNrn72FuHWkXtpJuUYfbH87d61qa6PSagUbLiK6VfLJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:24.379Z&quot;,
      &quot;snapshot&quot;: &quot;QmP5NuGdozeWaZqEdY1zBpcupB6qQ66AWReqm4L2vJzt73&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<h2 id="workflow"><a class="heading-anchor" href="#workflow"><span></span></a>Workflow</h2>
<p>In order to get started, all you need to do is initiate your ipscend in your web page/app project:</p>
<pre><code class="lang-bash">$ ipscend init
This utility will walk you through creating a ipscend.json file.
Path of your Web Application (project)? (public) src/public
$ cat ipscend.json
{
  &quot;versions&quot;: [],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<p>Once you are ready to publish, run the <code>ipscend publish</code> command:</p>
<pre><code class="lang-bash">$ ipscend publish
{ hash: &apos;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&apos;,
  timestamp: Fri Nov 27 2015 10:23:37 GMT+0000 (WET) }
published src/public QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh
$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-27T16:23:37.971Z&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
</code></pre>
<p>Grab that hash and share it with your friends, by sending them a link to ipfs.io, appending &quot;/ipfs/Hash&quot; (e.g.  https:/ipfs.io/ipfs/ QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh).</p>
<p>If you want to use your awesome.domain.com to load your page from IPFS, you can check how to do it now at <a href="https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick">https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick</a>.</p>
<h2 id="awesome-future-"><a class="heading-anchor" href="#awesome-future-"><span></span></a>Awesome (FUTURE)!</h2>
<p><code>ipscend</code> is still in its humble beginnings. Some of the ideas and plans to build in the future include being able to:</p>
<ul>
<li>Extract the version from the VCS itself (<a href="https://github.com/ipfs/notes/issues/23">https://github.com/ipfs/notes/issues/23</a>), so that every commit can be a different working version, allowing you to test every commit in your CI.</li>
<li>Roll back history, following the &apos;time machine&apos; analogy.</li>
<li>Update your DNS provider automatically, avoiding having to use an external tool like <a href="https://github.com/ipfs/dnslink-deploy"><code>dnslink-deploy</code></a>.</li>
<li>Enable reviewers to write notes.</li>
<li>Take screenshots in every browser version, so that we can use the timeline to see if there was any regression at a point in time, which might happen in a specific browser.</li>
<li>moaaaar :D If you have ideas or want to contribute, ipscend is fully MIT Licensed, so feel free to open a issue or PR on <a href="https://github.com/diasdavid/ipscend">https://github.com/diasdavid/ipscend</a>.</li>
</ul>
<p>A big thank you to <a href="https://github.com/andresgutgon">Andr&#xE9;s Gutgon</a> who made the screenshot preview look <a href="https://github.com/diasdavid/ipscend-screenshot-visualizer/pull/1">really good</a></p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/3-ipscend</link><guid isPermaLink="true">http://ipfs.io/blog/3-ipscend</guid><dc:creator><![CDATA[David Dias]]></dc:creator><pubDate>Fri, 27 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ipscend - Publish static web content to IPFS]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">3-ipscend</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="ipscend---publish-static-web-content-to-ipfs"><a class="heading-anchor" href="#ipscend---publish-static-web-content-to-ipfs"><span></span></a>ipscend - Publish static web content to IPFS</h1>
    <p>by David Dias on 2015-11-26</p>

    <p><a href="https://github.com/diasdavid/ipscend"><img src="!img/ipscend.png" alt=""></a></p>
<p><a href="https://github.com/diasdavid/ipscend"><code>ipscend</code></a> is a new tool to help developers publish their static web content to IPFS and share it easily, while keeping history and more. It is heavily inspired by previous static web content publishing tools, like GitHub Pages and surge.</p>
<h2 id="features"><a class="heading-anchor" href="#features"><span></span></a>Features</h2>
<p>Currently, <code>ipscend</code> offers a set of features, accessible through a CLI, and installable through npm (<code>npm i -g ipscend</code>), which enable a simple workflow for working in your Web page/app and publishing it to the IPFS network.</p>
<ul>
<li><code>ipscend browse</code> - Opens the last published version of your application in the browser.</li>
<li><code>ipscend init</code> - Initializes your project. Asks for the folder where the web application will be available and stores an <code>ipscend.json</code> object in your current path to store all the metadata it generates, such as published versions and taken screenshots.</li>
<li><code>ipscend preview</code> - Serves your application on a local static file server, so that you can try it out before you feel ready to publish it.</li>
<li><code>ipscend publish</code> - Publishes the current state of your application to IPFS and stores a reference to it.</li>
<li><code>ipscend versions</code> - Prints out the published versions for the app and its respective timestamp.</li>
<li><code>ipscend screenshot</code> - Opens a screenshot preview of all the published versions of your app. In order to generate the screenshots, you must first run <code>ipscend screenshot --gen</code>.</li>
</ul>
<p><img src="img/ipscend-screenshot.gif" alt=""></p>
<p>An <code>ipscend.json</code> object for a project with some published versions will look like:</p>
<pre><code class="lang-bash">$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmQhNMwk7fThpwRNUR3bStb1eA7aeFJaApZjDaQCnykowL&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:50:10.998Z&quot;,
      &quot;snapshot&quot;: &quot;QmNMqiKZG7gCsnaQFTqG3AUeVhA1n8byy974Yqn3qRGZcJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmSAmgQPCWjbrpbYHZQ2rVkH7a9vavubG1Jzv5CjDWrUmt&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:00.860Z&quot;,
      &quot;snapshot&quot;: &quot;QmcCNrn72FuHWkXtpJuUYfbH87d61qa6PSagUbLiK6VfLJ&quot;
    },
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-14T14:51:24.379Z&quot;,
      &quot;snapshot&quot;: &quot;QmP5NuGdozeWaZqEdY1zBpcupB6qQ66AWReqm4L2vJzt73&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<h2 id="workflow"><a class="heading-anchor" href="#workflow"><span></span></a>Workflow</h2>
<p>In order to get started, all you need to do is initiate your ipscend in your web page/app project:</p>
<pre><code class="lang-bash">$ ipscend init
This utility will walk you through creating a ipscend.json file.
Path of your Web Application (project)? (public) src/public
$ cat ipscend.json
{
  &quot;versions&quot;: [],
  &quot;path&quot;: &quot;src/public&quot;
}
</code></pre>
<p>Once you are ready to publish, run the <code>ipscend publish</code> command:</p>
<pre><code class="lang-bash">$ ipscend publish
{ hash: &apos;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&apos;,
  timestamp: Fri Nov 27 2015 10:23:37 GMT+0000 (WET) }
published src/public QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh
$ cat ipscend.json
{
  &quot;versions&quot;: [
    {
      &quot;hash&quot;: &quot;QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh&quot;,
      &quot;timestamp&quot;: &quot;2015-11-27T16:23:37.971Z&quot;
    }
  ],
  &quot;path&quot;: &quot;src/public&quot;
</code></pre>
<p>Grab that hash and share it with your friends, by sending them a link to ipfs.io, appending &quot;/ipfs/Hash&quot; (e.g.  https:/ipfs.io/ipfs/ QmVNgdUoBQHiBhSeDe2z8LttJaDZq7JZi17sR1SPnJmjMh).</p>
<p>If you want to use your awesome.domain.com to load your page from IPFS, you can check how to do it now at <a href="https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick">https://github.com/diasdavid/ipscend#use-ipfs-to-host-your-webpage-using-a-standard-domain-includes-cool-dns-trick</a>.</p>
<h2 id="awesome-future-"><a class="heading-anchor" href="#awesome-future-"><span></span></a>Awesome (FUTURE)!</h2>
<p><code>ipscend</code> is still in its humble beginnings. Some of the ideas and plans to build in the future include being able to:</p>
<ul>
<li>Extract the version from the VCS itself (<a href="https://github.com/ipfs/notes/issues/23">https://github.com/ipfs/notes/issues/23</a>), so that every commit can be a different working version, allowing you to test every commit in your CI.</li>
<li>Roll back history, following the &apos;time machine&apos; analogy.</li>
<li>Update your DNS provider automatically, avoiding having to use an external tool like <a href="https://github.com/ipfs/dnslink-deploy"><code>dnslink-deploy</code></a>.</li>
<li>Enable reviewers to write notes.</li>
<li>Take screenshots in every browser version, so that we can use the timeline to see if there was any regression at a point in time, which might happen in a specific browser.</li>
<li>moaaaar :D If you have ideas or want to contribute, ipscend is fully MIT Licensed, so feel free to open a issue or PR on <a href="https://github.com/diasdavid/ipscend">https://github.com/diasdavid/ipscend</a>.</li>
</ul>
<p>A big thank you to <a href="https://github.com/andresgutgon">Andr&#xE9;s Gutgon</a> who made the screenshot preview look <a href="https://github.com/diasdavid/ipscend-screenshot-visualizer/pull/1">really good</a></p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/3-ipscend</link><guid isPermaLink="true">http://ipfs.io/blog/3-ipscend</guid><dc:creator><![CDATA[David Dias]]></dc:creator><pubDate>Fri, 27 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Stellar Module Management - Install your Node.js modules using IPFS]]></title><description><![CDATA[<!DOCTYPE html>
<html>

<head>
<title>ipfs blog</title>

<link rel="stylesheet" href="../static/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="../static/blog-style.css">
<link rel="stylesheet" href="../static/highlight/github-gist.css">
<link rel="alternate" type="application/rss+xml" href="../rss.xml">

<script src="../static/highlight/highlight.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body>

<div class="container" id="content">
<div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">

<nav class="navbar">
  <div class="navbar-header">
    <p class="navbar-text">
    / <a href="http://ipfs.io">ipfs</a>
    / <a href="..">blog</a>
    
     / <a href="./">4-registry-mirror</a>
    
    </p>
  </div>

  <div class="nav navbar-nav navbar-right">
    <p class="navbar-text">
      <a href="https://github.com/ipfs/blog/">source</a>
    </p>
  </div>
</nav>


<div class="post">
    <h1 id="stellar-module-management---install-your-nodejs-modules-using-ipfs"><a class="heading-anchor" href="#stellar-module-management---install-your-nodejs-modules-using-ipfs"><span></span></a>Stellar Module Management - Install your Node.js modules using IPFS</h1>
    <p>by David Dias on 2015-12-07</p>

    <p><img src="img/node-interactive-logo.png" alt=""></p>
<p>Node.js Interactive, the first Node.js conference organized by the Linux Foundation, happened on Dec 8-9 of 2015. There were hundreds of participants, and dozens of really amazing talks divided in 3 specific tracks: backend, frontend and IoT.</p>
<p>I was fortunate to attend and present a project we&apos;ve been developing at <a href="https://ipn.io">Protocol Labs</a>, that builds on on top of <a href="https://ipfs.io">IPFS, the InterPlanetary FileSystem</a>.</p>
<p>You can learn about that project in this blog post, check out the <a href="http://www.slideshare.net/DavidDias11/nodejs-interactive">talk slides</a> or wait for the video recording of the talk. I will update this blog post when that happens.</p>
<h2 id="enter-registry-mirror"><a class="heading-anchor" href="#enter-registry-mirror"><span></span></a>Enter registry-mirror</h2>
<p><img src="img/enter-registry-mirror.png" alt="">
<a href="http://ipn.io"><img src="https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square" alt=""></a> <a href="http://ipfs.io/"><img src="https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square" alt=""></a> <a href="http://webchat.freenode.net/?channels=%23ipfs"><img src="https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square" alt=""></a></p>
<p><code>registry-mirror</code> enables distributed discovery of npm modules by fetching and caching the latest state of npm through IPNS, the InterPlanetary Naming System. With this state, a node in the network is capable of querying IPFS network for an npm module&apos;s cryptographic hash, fetching it from any peer that has it available.</p>
<p><code>registry-mirror</code> is open source, MIT licensed and available at <a href="https://github.com/diasdavid/registry-mirror">github.com/diasdavid/registry-mirror</a>.</p>
<h2 id="getting-started"><a class="heading-anchor" href="#getting-started"><span></span></a>Getting started</h2>
<p>In order to get started, you must first be sure that you are running IPFS 0.4.0. IPFS 0.4.0 is not yet released, but you can already use it by compiling from source or downloading the pre-built binary.</p>
<h4 id="compiling-from-source"><a class="heading-anchor" href="#compiling-from-source"><span></span></a>Compiling from source</h4>
<p>You can find a tutorial on how to compile and install IPFS from source at <a href="https://github.com/ipfs/go-ipfs#build-from-source">https://github.com/ipfs/go-ipfs#build-from-source</a>. Just make sure to change to the <code>dev0.4.0</code> branch, as 0.4.0 isn&apos;t released yet.</p>
<p>Please make sure you have go 1.5.2 or above installed.</p>
<h4 id="downloading-pre-built-binary"><a class="heading-anchor" href="#downloading-pre-built-binary"><span></span></a>Downloading pre-built Binary</h4>
<p>Download the pre-built binary for your OS and Arch at <a href="https://gobuilder.me/github.com/ipfs/go-ipfs/cmd/ipfs?branch=v0.4.0-dev">gobuilder</a>.</p>
<h4 id="installing-and-running-registry-mirror"><a class="heading-anchor" href="#installing-and-running-registry-mirror"><span></span></a>Installing and running registry-mirror</h4>
<p>Once you have IPFS 0.4.0 available, install registry-mirror by running the following command (you should have Node.js 4 and npm 2 or above available):</p>
<pre><code class="lang-bash">$ npm i registry-mirror -g
# ...
</code></pre>
<p>Then start your IPFS daemon, run:</p>
<pre><code class="lang-bash">$ ipfs daemon
Initializing daemon...
Swarm listening on /ip4/127.0.0.1/tcp/4001
Swarm listening on /ip4/172.19.248.69/tcp/4001
Swarm listening on /ip6/::1/tcp/4001
API server listening on /ip4/127.0.0.1/tcp/5001
Gateway (readonly) server listening on /ip4/127.0.0.1/tcp/8080
Daemon is ready
</code></pre>
<p>After, run registry-mirror daemon with the <code>--ipfs</code> option:</p>
<pre><code class="lang-bash">$ registry-mirror daemon --ipfs --port=9595
IPFS mode ON
registry-mirror [info] output dir: /npm-registry/
registry-mirror [info] listening:127.0.0.1:9595
registry-mirror [info] Updated /npm-registry to: /ipfs/QmSjG9fadu4mPdtRsQYtXhwwCBouFEPiYHtVf8f4iH6vwj
</code></pre>
<p>Now, to install a module using IPFS, you only need to set this local registry when running an <code>npm install</code>. This can be done through <a href="https://docs.npmjs.com/cli/config">config</a> or a command line argument:</p>
<pre><code class="lang-bash">$ npm i bignumber --registry=http://localhost:9595
npm http request GET http://localhost:9595/bignumber
npm http 200 http://localhost:9595/bignumber
npm http fetch GET http://localhost:9595/bignumber/-/bignumber-1.1.0.tgz
npm http fetch 200 http://localhost:9595/bignumber/-/bignumber-1.1.0.tgz
/Users/david/Documents/code/ipfs/ip-npm/node-interactive
&#x2514;&#x2500;&#x2500; bignumber@1.1.0
</code></pre>
<h2 id="features"><a class="heading-anchor" href="#features"><span></span></a>Features</h2>
<p><code>registry-mirror</code> itself is quite a simple application, as most of the heavy lifting is done by <a href="https://ipfs.io">IPFS</a>. IPFS&apos;s distributed nature affords a set of really nice features as a transport layer that <code>registry-mirror</code> leverages to create its service.</p>
<h4 id="find-where-the-module-lives-without-having-to-hit-the-backbone"><a class="heading-anchor" href="#find-where-the-module-lives-without-having-to-hit-the-backbone"><span></span></a>Find where the module lives without having to hit the backbone</h4>
<p>With <code>registry-mirror</code>, a registry becomes a curated list of hashes. While the modules live in the network, as soon as <code>registry-mirror</code> caches this list locally (which it gets from the IPFS network), it has a list of the hashes of the modules that a user might need in the future. With this list, a user doesn&apos;t have to know of the whereabouts of a module until it needs to request it from the network.</p>
<p>This list is fetched and kept up to date through IPNS. This ensures secure distribution, as IPNS records and validated with the publisher&apos;s priate key.</p>
<h4 id="work-offline-disconnected"><a class="heading-anchor" href="#work-offline-disconnected"><span></span></a>Work offline/disconnected</h4>
<p>Just like git, <code>registry-mirror</code> is able to work offline and/or in a disconnected scenario. As long as the module you are looking for exists in the network you are currently in, IPFS would be able to find it through its Peer and Content Routing (e.g. with a DHT).</p>
<h4 id="enable-several-registries-to-coexist"><a class="heading-anchor" href="#enable-several-registries-to-coexist"><span></span></a>Enable several registries to coexist</h4>
<p>Once the notion of a registry becomes a curated list of modules available, enabling more than one registry to exist becomes simpler. This scenario can be especially interesting for private networks such as the ones within companies and organizations that don&apos;t want their modules to be publicly known and available.</p>
<h4 id="run-only-what-you-were-looking-for"><a class="heading-anchor" href="#run-only-what-you-were-looking-for"><span></span></a>Run only what you were looking for</h4>
<p>Just like git, IPFS verifies the content received using cryptographic hashing, making sure it is exactly what was requested -- you can always be sure that what you are running is what you asked for.</p>
<h4 id="faster"><a class="heading-anchor" href="#faster"><span></span></a>Faster</h4>
<p>By leveraging local and network caches efficiently, downloading your dependencies can be much faster as it avoids going to npm&apos;s servers or CDN all the time. This can be crucial in high latency networks or more remote areas.</p>
<h2 id="demo-video"><a class="heading-anchor" href="#demo-video"><span></span></a>Demo Video</h2>
<p><iframe src="https://player.vimeo.com/video/147968322" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe> </p><p><a href="https://vimeo.com/147968322">registry-mirror demo</a> from <a href="https://vimeo.com/daviddias">David Dias</a> on <a href="https://vimeo.com">Vimeo</a>.</p><p></p>
<h2 id="a-special-thanks"><a class="heading-anchor" href="#a-special-thanks"><span></span></a>A special thanks</h2>
<p>A very big thank you goes to <a href="https://github.com/bengl">Bryan English</a> and everyone that was involved in the <a href="https://github.com/ipfs/notes/issues/2">discussion</a> and contributed to make this possible.</p>

</div>


</div>
</div> <!-- container / content -->
</body>
</html>
]]></description><link>http://ipfs.io/blog/4-registry-mirror</link><guid isPermaLink="true">http://ipfs.io/blog/4-registry-mirror</guid><dc:creator><![CDATA[David Dias]]></dc:creator><pubDate>Tue, 08 Dec 2015 00:00:00 GMT</pubDate></item></channel></rss>